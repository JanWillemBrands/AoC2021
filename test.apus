whitespace : /\s+/.
comment    : /\/\/.*/.


//S = X X X.                    // PASS
//X = "x".

//S = X "x" | X "x".            // PASS
//X = "x".

//S = "x" X | "x" X.            // PASS
//X = "x".

//S = X | X.
//X = "x".                      // PASS

//S = X | X.                    // PASS
//X = ["x"].

//S = "x" | "x".                // PASS

//S = "x" X "x" | "x" X "x".    // PASS
//X = "x".

//S = ( ["x"] | ["x"] ) "x".    // PASS

//S = "x".                      // PASS
//S = "x" "x".                  // PASS
//S = "a" "b".                  // PASS
//S = "a" "".                   // PASS

//S = "a" /u+/ "b".             // PASS auuub
//S = /u+/ "b".                 // FAIL uuub (first regex in production means "named regex"")

//S = ["x"].                    // PASS
//S = "x" | "".                 // PASS
//S = ["x"] "a".                // PASS
//S = "x" ["x"].                // PASS
//S = ["x"] "x".                // PASS

//S = {"x"}.                    // PASS
//S = "x" {"x"}.                // PASS
//S = {"x"} "x".                // PASS

//S = "x" [S].                  // PASS

//S = "x" | "x" S.                      // PASS
//S = "x" S | "x".                      // PASS

//S = "x" | S "x".                      // PASS
//S = S "x" | "x".                      // PASS

//S = S "x" | "".                       // PASS
//S = "x" S | "".                       // PASS

//S = A B. A = "a". B = "b".            // PASS
//S = X X X. X = "x".                   // PASS

//S = "a" {"x"} "c".                    // PASS

//S = {{"x"}}.                          // PASS
//S = {{"x"}} "a".                      // PASS
//S = {"x"} {"x"}.                      // PASS but all combination sets are reached

//S = <"x">.                            // PASS
//S = < "x" | "x" >.                    // PASS
//S = <"x"> <"x">.                      // PASS but all combination sets are reached

//S = "x".                              // PASS

//S = "a" | "b" .                       // PASS
//S = "x" | "x" .                       // PASS
//S = "x" ( "x" | "x" ) "x".            // PASS
//S = ( "x" | "x" ) "x".                // PASS
//S = "x" ( "x" | "x" ).                // PASS

//S = "b" S | A S "d" | "". A = "a".    // PASS on "aadd" Cappers thesis Γ3

//S = "a" S | "a" S "d" | "".           // PASS on "aad" Cappers thesis Γ5

//S = "a" S "b" | "a" S "c" | "a".      // PASS on "aac" "Alfroozeh Γ0

//S = ( "a" "b" | "a" "b" ) "c".        // PASS on "abc"

//S = "a" A B | "a" A "b".              // PASS on "aab" Binsbergen Γ1 (2 matches, need to check for derivation equivalence)
//A = "a" | "c" | "".
//B = "b" | B "c" | "".

//S = A C "a" B | A B "a" "a".          // PASS on "aabbaa" Binsbergen Γ2 (1 match, need to check derivation efficiency)
//A = "a" A | "a".
//B = "b" B | "b".
//C = "b" C | "c".

//S = ( ("a" | "a" ) | "a" ) | "a".     // PASS on "a"
//S = ( ( ( "a" ) "a" ) "a" ) "a".      // PASS on "aaaa"

//S = "a" B "c" | "a" B "c". B = "b".   // PASS on "abc"

//S = "x" | S S | S S S.                // PASS on "xxx" Binsbergen Γ3  matched: _2_!!!   failed: 5   gss size: 16   descriptors: 118
//S = "x" | S S.                        // PASS on "xxx" Binsbergen Γ3  matched: _2_!!!   failed: 5   gss size: 16   descriptors: 118
//S = "x" | S S S.                      // PASS on "xxx"

//S = "x" | {"x" "x"} | {"x" "x" "x"}.  //PASS but all combination sets are reached

//S = A "b" | A "c". A = ["a"].         //PASS

//S = "a" [ "b" | "c" ] "d" .            //PASS
//S = "k" [ "l" | "m" ] "n".

//S = A "b" | A "c". A = "a" | "".      // PASS
//S = A "b" | A "c".  A = "a".          // PASS
//S = ["a"] ["b"] ["c"].                // PASS
//S = A B. A = ["a"]. B = ["b"].        // PASS
//S = "" "" "a".                        // PASS
//S = ((("a"))).                        // PASS
//S = { "a" } "b".                      // PASS
//S = "a" | "c" "d".                    // PASS
//S = ("a" | "b") | "c".                // PASS
//S = {"a"} "x" {"b" | "c"}.            // PASS
//S = "" | "b".                         // PASS
//S = S "a" | S "b" | "".               // PASS

//S = X X. X = "x".                     // PASS
//S = X. X = "x".                       // PASS

//S = "x". S = "xx". S = "xxx".         // PASS

//S = { "a" {"b"} "c" }.                // PASS
//S = { "a" B "c" }. B = { "b" }.       // PASS
//S = { "x" X "x" }. X = { "x" }.       // PASS

//S = "a"("a""b"|"a")("b""c"|"c").      // PASS Scott & Johnstone EBNF two derivations

//something  = /[a-z]+/ .
//S = something something.              // PASS

//S = A "b" | A "c". A = ["a"].         // PASS

//S = ["a"] | ["b"] | ["c"].            // PASS
S = "bla" ("hup" "lala") * "!" .      // PASS

//S = @a@ { @b@ "x" @c@ } @d@ .         // PASS
//S = @a@ "x" @b@ | @c@ "y" @d@ .       // PASS
//@bla@ S @bla@ = "x" .                 // FAIL need to think about actions surrounding lhs nonterminals

//S = @a@ @aa@ "x" @b@ @bb@ ( @c@ @cc@ "y" @d@ @dd@ "z" @e@ @ee@ ) @f@ @ff@ * @g@ @gg@ "w" @h@ @hh@ .  // PASS xyzyzyzw
//S = "x" * * .

^^^bla hup lala hup lala !
