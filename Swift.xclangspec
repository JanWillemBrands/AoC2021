// Swift
(

    // MARK: Swift keywords
    {
        Identifier = "xcode.lang.swift.identifier";
        Syntax = {
            StartChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$";
            Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
            Words = (
                "Any",
                "Protocol",
                "Self",
                "Type",
                "actor",
                "any",
                "as",
                "assignment",
                "associatedtype",
                "associativity",
                "async",
                "await",
                "borrowing",
                "break",
                "case",
                "catch",
                "class",
                "consume",
                "consuming",
                "continue",
                "convenience",
                "default",
                "defer",
                "deinit",
                "didSet",
                "discard",
                "distributed",
                "do",
                "dynamic",
                "dynamicType",
                "each",
                "else",
                "enum",
                "extension",
                "fallthrough",
                "false",
                "fileprivate",
                "final",
                "for",
                "func",
                "get",
                "guard",
                "higherThan",
                "if",
                "import",
                "in",
                "indirect",
                "infix",
                "init",
                "inout",
                "internal",
                "is",
                "isolated",
                "lazy",
                "left",
                "let",
                "lowerThan",
                "macro",
                "mutating",
                "nil",
                "none",
                "nonisolated",
                "nonmutating",
                "open",
                "operator",
                "optional",
                "override",
                "package",
                "postfix",
                "precedence",
                "precedencegroup",
                "prefix",
                "private",
                "protocol",
                "public",
                "repeat",
                "required",
                "rethrows",
                "return",
                "right",
                "safe",
                "self",
                "sending",
                "set",
                "some",
                "static",
                "struct",
                "subscript",
                "super",
                "switch",
                "throw",
                "throws",
                "true",
                "try",
                "typealias",
                "unowned",
                "unsafe",
                "var",
                "weak",
                "where",
                "while",
                "willSet",

                "__consuming",
                "__owned",
                "__shared",
            );
            Type = "xcode.syntax.keyword";
            AltType = "xcode.syntax.identifier";    // non-keywords are identifiers
        };
    },
    {
        Identifier = "xcode.lang.swift.identifier.attribute";
        Syntax = {
            StartChars = "@";
            Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
            Words = (
                "@GKInspectable",
                "@IBAction",
                "@IBDesignable",
                "@IBInspectable",
                "@IBOutlet",
                "@IBSegueAction",
                "@NSApplicationMain",
                "@NSCopying",
                "@NSManaged",
                "@Sendable",
                "@UIApplicationMain",
                "@autoclosure",
                "@actorIndependent",
                "@asyncHandler",
                "@attached",
                "@available",
                "@backDeployed",
                "@convention",
                "@discardableResult",
                "@dynamicCallable",
                "@dynamicMemberLookup",
                "@escaping",
                "@freestanding",
                "@frozen",
                "@globalActor",
                "@inlinable",
                "@implementation",
                "@inline",
                "@isolated",
                "@main",
                "@nonobjc",
                "@noreturn",
                "@objc",
                "@objcMembers",
                "@preconcurrency",
                "@propertyWrapper",
                "@requires_stored_property_inits",
                "@resultBuilder",
                "@retroactive",
                "@storageRestrictions",
                "@testable",
                "@unchecked",
                "@unknown",
                "@usableFromInline",
                "@warn_unqualified_access",
                "@_spi",
            );
            Type = "xcode.syntax.keyword";
            AltType = "xcode.syntax.identifier";    // non-keywords are identifiers
        };
    },
    {
        Identifier = "xcode.lang.swift.preprocessor.keyword";
        Syntax = {
            Words = (
                "#available",
                "#colorLiteral",
                "#column",
                "#dsohandle",
                //"#else",
                //"#elseif",
                //"#endif",
                //"#error",
                "#externalMacro",
                "#file",
                "#fileID",
                "#fileLiteral",
                "#filePath",
                "#function",
                //"#if",
                "#imageLiteral",
                "#isolation",
                "#keyPath",
                "#line",
                "#selector",
                "#sourceLocation",
                "#unavailable",
                //"#warning",
            );
            Type = "xcode.syntax.keyword";
        };
    },
    {
        Identifier = "xcode.lang.swift.nonnative.preprocessor";
        Syntax = {
            Start = "#";
            EscapeChar = "\\";
            End = "\n";
            StartAtBOL = YES;
            Type = "xcode.syntax.preprocessor";
        };
    },
    {
        Identifier = "xcode.lang.swift.closureArg";
        Syntax = {
            StartChars = "$";
            Chars = "0123456789";
            Type = "xcode.syntax.identifier";
        };
    },

    {
        Identifier = "xcode.lang.swift.interestingOperators";
        Syntax = {
            StartChars = "-!?=.:,;&";
            Chars = "/-+!*%&|^~?<>=.:,;";
            Words = (
                "...",
                "..<",
                ".",
                ":",
                "=",
                "==",
                "!=",
                ",",
                ";",
                "?",
                "!",
                "&",
                "->",
            );
            Type = "xcode.syntax.plain";
        };
    },
    {
        Identifier = "xcode.lang.swift.identifier.backtick";
        Syntax = {
            Start = "`";
            End = "`|\n";
            Type = "xcode.syntax.identifier";
        };
    },

    {
        Identifier = "xcode.lang.swift.anoperator";
        Syntax = {
            StartChars = "/-+!*%&|^~?<>=.";
            Match = (
                "((<|=|>)[/\\-+!*%&|^~?<>=]+)|(\\.[./\\-+!*%&|^~?<>=]*)|([/\\-+!*%&|^~?][/\\-+!*%&|^~?<>=]*)",
            );
            Type = "xcode.syntax.plain";
        };
    },
    {
        Identifier = "xcode.lang.swift.string";
        BasedOn = "xcode.lang.string";
        Syntax = {
            Tokenizer = "xcode.lang.swift.string.lexer";
            Start = "\"";
            Ignore = "\\\"";
            End = "\"|\n";
            IncludeRules = ( "xcode.lang.swift.string.interpolation", );
            Type = "xcode.syntax.string";
        };
    },
    {
        Identifier = "xcode.lang.swift.string.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.swift.string.tokens",
                "xcode.lang.swift.string.escaped.backslash",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.string.tokens";
        Syntax = {
            Words = (  "\\(", );
        };
    },
    {
        Identifier = "xcode.lang.swift.string.escaped.backslash";
        Syntax = {
            Words = (  "\\\\", );
        };
    },
    {
        Identifier = "xcode.lang.swift.string.interpolation";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "\\(";
            End = ")";
            IncludeRules = (
                "xcode.lang.swift.parenexpr",
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.block",
            );
            Type = "xcode.syntax.plain";
        };
    },

    {
        Identifier = "xcode.lang.swift.string.multiline";
        Syntax = {
            Tokenizer = "xcode.lang.swift.string.multiline.lexer";
            Start = "\"\"\"";
            Ignore = "\\\"";
            End = "\"\"\"";
            IncludeRules = ( "xcode.lang.swift.string.multiline.interpolation", );
            Type = "xcode.syntax.string";
        };
    },
    {
        Identifier = "xcode.lang.swift.string.multiline.lexer";
        Syntax = {
            IncludeRules = ( "xcode.lang.swift.string.multiline.tokens", );
        };
    },
    {
        Identifier = "xcode.lang.swift.string.multiline.tokens";
        Syntax = {
            Words = (  "\\(", );
        };
    },
    {
        Identifier = "xcode.lang.swift.string.multiline.interpolation";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "\\(";
            End = ")";
            IncludeRules = (
                "xcode.lang.swift.parenexpr",
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.block",
            );
            Type = "xcode.syntax.plain";
        };
    },

    {
        Identifier = "xcode.lang.swift.string.multiline.pound1";
        Syntax = {
            Tokenizer = "xcode.lang.swift.string.multiline.pound1.lexer";
            Start = "#\"\"\"";
            Ignore = "\\#\"";
            End = "\"\"\"#";
            IncludeRules = ( "xcode.lang.swift.string.multiline.pound1.interpolation", );
            Type = "xcode.syntax.string";
        };
    },
    {
        Identifier = "xcode.lang.swift.string.multiline.pound1.lexer";
        Syntax = {
            IncludeRules = ( "xcode.lang.swift.string.multiline.pound1.tokens", );
        };
    },
    {
        Identifier = "xcode.lang.swift.string.multiline.pound1.tokens";
        Syntax = {
            Words = (  "\\#(", );
        };
    },
    {
        Identifier = "xcode.lang.swift.string.multiline.pound1.interpolation";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "\\#(";
            End = ")";
            IncludeRules = (
                "xcode.lang.swift.parenexpr",
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.block",
            );
            Type = "xcode.syntax.plain";
        };
    },

    {
        Identifier = "xcode.lang.swift.string.multiline.pound2";
        Syntax = {
            Tokenizer = "xcode.lang.swift.string.multiline.pound2.lexer";
            Start = "##\"\"\"";
            Ignore = "\\##\"";
            End = "\"\"\"##";
            IncludeRules = ( "xcode.lang.swift.string.multiline.pound2.interpolation", );
            Type = "xcode.syntax.string";
        };
    },
    {
        Identifier = "xcode.lang.swift.string.multiline.pound2.lexer";
        Syntax = {
            IncludeRules = ( "xcode.lang.swift.string.multiline.pound2.tokens", );
        };
    },
    {
        Identifier = "xcode.lang.swift.string.multiline.pound2.tokens";
        Syntax = {
            Words = (  "\\##(", );
        };
    },
    {
        Identifier = "xcode.lang.swift.string.multiline.pound2.interpolation";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "\\##(";
            End = ")";
            IncludeRules = (
                "xcode.lang.swift.parenexpr",
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.block",
            );
            Type = "xcode.syntax.plain";
        };
    },

    {
        Identifier = "xcode.lang.swift.string.multiline.pound3";
        Syntax = {
            Tokenizer = "xcode.lang.swift.string.multiline.pound3.lexer";
            Start = "###\"\"\"";
            Ignore = "\\###\"";
            End = "\"\"\"###";
            IncludeRules = ( "xcode.lang.swift.string.multiline.pound3.interpolation", );
            Type = "xcode.syntax.string";
        };
    },
    {
        Identifier = "xcode.lang.swift.string.multiline.pound3.lexer";
        Syntax = {
            IncludeRules = ( "xcode.lang.swift.string.multiline.pound3.tokens", );
        };
    },
    {
        Identifier = "xcode.lang.swift.string.multiline.pound3.tokens";
        Syntax = {
            Words = (  "\\###(", );
        };
    },
    {
        Identifier = "xcode.lang.swift.string.multiline.pound3.interpolation";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "\\###(";
            End = ")";
            IncludeRules = (
                "xcode.lang.swift.parenexpr",
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.block",
            );
            Type = "xcode.syntax.plain";
        };
    },

    {
        Identifier = "xcode.lang.swift.string.multiline.pound4";
        Syntax = {
            Tokenizer = "xcode.lang.swift.string.multiline.pound4.lexer";
            Start = "####\"\"\"";
            Ignore = "\\####\"";
            End = "\"\"\"####";
            IncludeRules = ( "xcode.lang.swift.string.multiline.pound4.interpolation", );
            Type = "xcode.syntax.string";
        };
    },
    {
        Identifier = "xcode.lang.swift.string.multiline.pound4.lexer";
        Syntax = {
            IncludeRules = ( "xcode.lang.swift.string.multiline.pound4.tokens", );
        };
    },
    {
        Identifier = "xcode.lang.swift.string.multiline.pound4.tokens";
        Syntax = {
            Words = (  "\\####(", );
        };
    },
    {
        Identifier = "xcode.lang.swift.string.multiline.pound4.interpolation";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "\\####(";
            End = ")";
            IncludeRules = (
                "xcode.lang.swift.parenexpr",
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.block",
            );
            Type = "xcode.syntax.plain";
        };
    },

    {
        Identifier = "xcode.lang.swift.string.multiline.pound5";
        Syntax = {
            Tokenizer = "xcode.lang.swift.string.multiline.pound5.lexer";
            Start = "#####\"\"\"";
            Ignore = "\\#####\"";
            End = "\"\"\"#####";
            IncludeRules = ( "xcode.lang.swift.string.multiline.pound5.interpolation", );
            Type = "xcode.syntax.string";
        };
    },
    {
        Identifier = "xcode.lang.swift.string.multiline.pound5.lexer";
        Syntax = {
            IncludeRules = ( "xcode.lang.swift.string.multiline.pound5.tokens", );
        };
    },
    {
        Identifier = "xcode.lang.swift.string.multiline.pound5.tokens";
        Syntax = {
            Words = (  "\\#####(", );
        };
    },
    {
        Identifier = "xcode.lang.swift.string.multiline.pound5.interpolation";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "\\#####(";
            End = ")";
            IncludeRules = (
                "xcode.lang.swift.parenexpr",
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.block",
            );
            Type = "xcode.syntax.plain";
        };
    },

    {
        Identifier = "xcode.lang.swift.integer";
        Syntax = {
            StartChars = "+-0123456789";
            Chars = "0123456789+-.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
            Volatile = YES;
            Match = (
                "^[+-]?0[bB][01_]+",
                "^[+-]?0[xX][0-9a-fA-F_]*",
                "^[+-]?[0-9_]+",
            );
            Type = "xcode.syntax.number";
        };
    },
    {
        Identifier = "xcode.lang.swift.double";
        Syntax = {
            StartChars = "+-0123456789";
            Chars = "0123456789+-.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
            Match = (
                "^[+-]?0[xX][0-9a-fA-F_]+[pP][+-]?[0-9_]*",
                "^[+-]?0[xX][0-9a-fA-F_]+\\.[0-9a-fA-F_]+([pP][+-]?[0-9_]+)?",
                "^[+-]?[0-9_]+[eE][+-]?[0-9_]*",
                "^[+-]?[0-9_]+\\.[0-9_]+([eE][+-]?[0-9_]*)?",
            );
            Type = "xcode.syntax.number";
        };
    },
    {
        Identifier = "xcode.lang.swift.preprocessor.line";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "xcode.lang.swift.preprocessor.line.start";
            End = "\n";
            Type = "xcode.syntax.preprocessor";
        };
    },
    {
        Identifier = "xcode.lang.swift.preprocessor.line.start";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "#!|#if|#else|#elseif|#endif|#error|#warning|#sourceLocation",
            );
            Type = "xcode.syntax.preprocessor";
        };
    },

    {
        Identifier = "xcode.lang.swift.regex.hash";
        Syntax = {
            Start = "#/";
            End = "/#";
            Type = "xcode.syntax.pattern";
        };
    },
    {
        Identifier = "xcode.lang.swift.regex.hash2";
        Syntax = {
            Start = "##/";
            End = "/##";
            Type = "xcode.syntax.pattern";
        };
    },
    {
        Identifier = "xcode.lang.swift.regex.hash3";
        Syntax = {
            Start = "###/";
            End = "/###";
            Type = "xcode.syntax.pattern";
        };
    },
    {
        Identifier = "xcode.lang.swift.regex.hash4";
        Syntax = {
            Start = "####/";
            End = "/####";
            Type = "xcode.syntax.pattern";
        };
    },
    {
        Identifier = "xcode.lang.swift.regex.hash5";
        Syntax = {
            Start = "#####/";
            End = "/#####";
            Type = "xcode.syntax.pattern";
        };
    },

    // MARK: - Swift Syntax Coloring

    {
        Identifier = "xcode.lang.swift";
        Description = "Swift Coloring";
        BasedOn = "xcode.lang.simpleColoring";
        IncludeInMenu = YES;
        UsesCLikeIndentation = YES;
        Name = "Swift";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            IncludeRules = (
                "xcode.lang.swift.import",
                "xcode.lang.swift.typealias",
                "xcode.lang.swift.actor",
                "xcode.lang.swift.class",
                "xcode.lang.swift.extension",
                "xcode.lang.swift.struct",
                "xcode.lang.swift.protocol",
                "xcode.lang.swift.enum",
                "xcode.lang.swift.function",
                "xcode.lang.swift.variable.global",
                "xcode.lang.swift.variable.global.tuple",
                "xcode.lang.swift.macro",
                "xcode.lang.swift.precedencegroup",
                "xcode.lang.swift.operator",
                "xcode.lang.swift.genericsclause.general",
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.parenexpr.complex",
                "xcode.lang.swift.guard",
                "xcode.lang.swift.if",
                "xcode.lang.swift.if.else.part",
                "xcode.lang.swift.for",
                "xcode.lang.swift.switch",
                "xcode.lang.swift.while",
                "xcode.lang.swift.repeat",
                "xcode.lang.swift.catch",
                "xcode.lang.swift.block",
                "xcode.lang.swift.literal",
                "xcode.lang.swift.preprocessor.line",
            );
            Type = "xcode.syntax.plain";
        };
    },

    // The following rule returns tokens to the other rules
    {
        Identifier = "xcode.lang.swift.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.swift.doccomment.slash",
                "xcode.lang.swift.doccomment.star",
                "xcode.lang.comment.recursive",
                "xcode.lang.comment.singleline",
                "xcode.lang.swift.string.multiline",
                "xcode.lang.swift.string.multiline.pound1",
                "xcode.lang.swift.string.multiline.pound2",
                "xcode.lang.swift.string.multiline.pound3",
                "xcode.lang.swift.string.multiline.pound4",
                "xcode.lang.swift.string.multiline.pound5",
                "xcode.lang.swift.string",
                "xcode.lang.swift.regex.hash",
                "xcode.lang.swift.regex.hash2",
                "xcode.lang.swift.regex.hash3",
                "xcode.lang.swift.regex.hash4",
                "xcode.lang.swift.regex.hash5",
                "xcode.lang.swift.identifier.backtick",
                "xcode.lang.swift.double",
                "xcode.lang.swift.integer",
                "xcode.lang.completionplaceholder",
                "xcode.lang.swift.closureArg",
                "xcode.lang.swift.identifier",
                "xcode.lang.swift.identifier.attribute",
                "xcode.lang.swift.preprocessor.keyword",
                "xcode.lang.swift.nonnative.preprocessor",
                "xcode.lang.swift.openAngle",
                "xcode.lang.swift.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.lexer.conformance";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.swift.doccomment.slash",
                "xcode.lang.swift.doccomment.star",
                "xcode.lang.comment.recursive",
                "xcode.lang.comment.singleline",
                "xcode.lang.swift.string.multiline",
                "xcode.lang.swift.string.multiline.pound1",
                "xcode.lang.swift.string.multiline.pound2",
                "xcode.lang.swift.string.multiline.pound3",
                "xcode.lang.swift.string.multiline.pound4",
                "xcode.lang.swift.string.multiline.pound5",
                "xcode.lang.swift.string",
                "xcode.lang.swift.regex.hash",
                "xcode.lang.swift.regex.hash2",
                "xcode.lang.swift.regex.hash3",
                "xcode.lang.swift.regex.hash4",
                "xcode.lang.swift.regex.hash5",
                "xcode.lang.swift.identifier.backtick",
                "xcode.lang.swift.double",
                "xcode.lang.swift.integer",
                "xcode.lang.completionplaceholder",
                "xcode.lang.swift.closureArg",
                "xcode.lang.swift.identifier",
                "xcode.lang.swift.identifier.attribute",
                "xcode.lang.swift.preprocessor.keyword",
                "xcode.lang.swift.nonnative.preprocessor",
                "xcode.lang.swift.conformance.start",
                "xcode.lang.swift.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.lexer.variable";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.swift.doccomment.slash",
                "xcode.lang.swift.doccomment.star",
                "xcode.lang.comment.recursive",
                "xcode.lang.comment.singleline",
                "xcode.lang.swift.string.multiline",
                "xcode.lang.swift.string.multiline.pound1",
                "xcode.lang.swift.string.multiline.pound2",
                "xcode.lang.swift.string.multiline.pound3",
                "xcode.lang.swift.string.multiline.pound4",
                "xcode.lang.swift.string.multiline.pound5",
                "xcode.lang.swift.string",
                "xcode.lang.swift.regex.hash",
                "xcode.lang.swift.regex.hash2",
                "xcode.lang.swift.regex.hash3",
                "xcode.lang.swift.regex.hash4",
                "xcode.lang.swift.regex.hash5",
                "xcode.lang.swift.identifier.backtick",
                "xcode.lang.swift.double",
                "xcode.lang.swift.integer",
                "xcode.lang.completionplaceholder",
                "xcode.lang.swift.closureArg",
                "xcode.lang.swift.identifier",
                "xcode.lang.swift.identifier.attribute",
                "xcode.lang.swift.preprocessor.keyword",
                "xcode.lang.swift.nonnative.preprocessor",
                "xcode.lang.swift.interestingOperators",
            );
        };
    },

    // The following rule returns tokens to the other rules
    {
        Identifier = "xcode.lang.swift.lexer.params";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.swift.doccomment.slash",
                "xcode.lang.swift.doccomment.star",
                "xcode.lang.comment.recursive",
                "xcode.lang.comment.singleline",
                "xcode.lang.swift.string.multiline",
                "xcode.lang.swift.string.multiline.pound1",
                "xcode.lang.swift.string.multiline.pound2",
                "xcode.lang.swift.string.multiline.pound3",
                "xcode.lang.swift.string.multiline.pound4",
                "xcode.lang.swift.string.multiline.pound5",
                "xcode.lang.swift.string",
                "xcode.lang.swift.regex.hash",
                "xcode.lang.swift.regex.hash2",
                "xcode.lang.swift.regex.hash3",
                "xcode.lang.swift.regex.hash4",
                "xcode.lang.swift.regex.hash5",
                "xcode.lang.swift.identifier.backtick",
                "xcode.lang.swift.function.parameter.colon",
                "xcode.lang.swift.double",
                "xcode.lang.swift.integer",
                "xcode.lang.completionplaceholder",
                "xcode.lang.swift.closureArg",
                "xcode.lang.swift.identifier",
                "xcode.lang.swift.identifier.attribute",
                "xcode.lang.swift.literal",
                "xcode.lang.swift.preprocessor.keyword",
                "xcode.lang.swift.nonnative.preprocessor",
                "xcode.lang.swift.interestingOperators",
                "xcode.lang.swift.anoperator",
            );
        };
    },
    
// Mark: - Literals
    {
        Identifier = "xcode.lang.swift.literal";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "#imageLiteral|#colorLiteral|#fileLiteral",
                "xcode.lang.swift.parenexpr",
            );
            Type = "xcode.syntax.keyword";
            ShouldTraverse = YES;
        };
    },

// Mark: - Import Statements
    {
        Identifier = "xcode.lang.swift.import";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "import";
            End = "\n";
            IncludeRules = (
                "xcode.lang.swift.import.kind",
                "xcode.lang.swift.import.modulepath",
            );
            Type = "xcode.syntax.module.import";
            ShouldTraverse = YES;
        };
    },

    {
        Identifier = "xcode.lang.swift.import.kind";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "typealias|struct|class|enum|protocol|let|var|func",
            );
        };
    },

    {
        Identifier = "xcode.lang.swift.import.modulepath";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.identifier",
                "xcode.lang.swift.import.modulepath.more*",
            );
            ShouldTraverse = YES;
        };
    },

    {
        Identifier = "xcode.lang.swift.import.modulepath.more";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                ".",
                "xcode.lang.swift.identifier",
            );
            ShouldTraverse = YES;
        };
    },

// MARK: - Associatedtype

    {
        Identifier = "xcode.lang.swift.associatedtype";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "associatedtype",
                "\n*",
                "xcode.lang.swift.associatedtype.name",
                "\n*",
                "xcode.lang.swift.associatedtype.type?",
                "\n*",
                "xcode.lang.swift.conformance?",
                "\n*",
                "xcode.lang.swift.whereclause?"
            );
            Type = "xcode.syntax.associatedtype";
            ShouldTraverse = YES;
        };
    },
    
    {
        Identifier = "xcode.lang.swift.associatedtype.name";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.identifier",
            );
            Type = "xcode.syntax.name.type";
        };
    },

    {
        Identifier = "xcode.lang.swift.associatedtype.type";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "=";
            Until = "\n|{|}|]|)|;|,";
            IncludeRules = (
                "xcode.lang.swift.parenexpr",
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.genericsclause",
            );
            ShouldTraverse = YES;
        };
    },
        
// MARK: - Typealiases

    {
        Identifier = "xcode.lang.swift.typealias";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "typealias",
                "\n*",
                "xcode.lang.swift.typealias.name",
                "\n*",
                "xcode.lang.swift.genericsclause?",
                "\n*",
                "xcode.lang.swift.typealias.type",
            );
            Type = "xcode.syntax.typedef";
            ShouldTraverse = YES;
        };
    },
    
    {
        Identifier = "xcode.lang.swift.typealias.name";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.identifier",
            );
            Type = "xcode.syntax.name.type";
        };
    },

    {
        Identifier = "xcode.lang.swift.typealias.type";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "=";
            Until = "\n|{|}|]|)|;|,";
            IncludeRules = (
                "xcode.lang.swift.parenexpr",
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.genericsclause",
            );
            ShouldTraverse = YES;
        };
    },
    
    // MARK: - Classes

    {
        Identifier = "xcode.lang.swift.actor";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.actor.declarator",
                "\n*",
                "xcode.lang.swift.actor.block",
            );
            Type = "xcode.syntax.declaration.actor";
        };
    },

    {
        Identifier = "xcode.lang.swift.actor.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.conformance";
            Rules = (
                "actor",
                "\n*",
                "xcode.lang.swift.declaration.name",
                "\n*",
                "xcode.lang.swift.genericsclause?",
                "\n*",
                "xcode.lang.swift.conformance?",
                "\n*",
                "xcode.lang.swift.whereclause?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    
    {
        Identifier = "xcode.lang.swift.class";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.class.declarator",
                "\n*",
                "xcode.lang.swift.class.block",
            );
            Type = "xcode.syntax.definition.class";
        };
    },

    {
        Identifier = "xcode.lang.swift.class.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.conformance";
            Rules = (
                "class",
                "\n*",
                "xcode.lang.swift.declaration.name",
                "\n*",
                "xcode.lang.swift.genericsclause?",
                "\n*",
                "xcode.lang.swift.conformance?",
                "\n*",
                "xcode.lang.swift.whereclause?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    
    {
        Identifier = "xcode.lang.swift.extension";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.extension.declarator",
                "\n*",
                "xcode.lang.swift.class.block",
            );
            Type = "xcode.syntax.definition.extension";
        };
    },

    {
        Identifier = "xcode.lang.swift.extension.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.conformance";
            Rules = (
                "extension",
                "\n*",
                "xcode.lang.swift.declaration.name?",
                // Effectively allow any type.
                "xcode.lang.swift.bracketexpr?",
                "xcode.lang.swift.genericsclause?",
                "?*",
                "\n*",
                "xcode.lang.swift.conformance?",
                "\n*",
                "xcode.lang.swift.whereclause?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },

    {
        Identifier = "xcode.lang.swift.declaration.name";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.conformance";
            Rules = (
                "xcode.lang.swift.name.qualified",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.swift.name.qualified";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.conformance";
            Rules = (
                "xcode.lang.swift.name.type",
                "xcode.lang.swift.name.qualified.more*",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.name.qualified.more";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.conformance";
            Rules = (
                ".",
                "xcode.lang.swift.name.type",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.name.type";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.conformance";
            Rules = (
                "xcode.lang.swift.identifier",
            );
            Type = "xcode.syntax.name.type";
        };
    },

    {
        Identifier = "xcode.lang.swift.genericsclause";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.conformance";
            Start = "<";
            End = ">";
            Recursive = YES;
            Until = "{|}|)|]"; // error out if we get unexpected stuff.
            IncludeRules = (
                "xcode.lang.swift.commaAndEOL",
                "xcode.lang.swift.parenexpr",
                "xcode.lang.swift.bracketexpr",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.genericsclause.general";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.conformance";
            Start = "xcode.lang.swift.openAngle";
            End = ">";
            Recursive = YES;
            Until = "\n|{|}|)|]"; // error out if we get unexpected stuff.
            IncludeRules = (
                "xcode.lang.swift.commaAndEOL",
                "xcode.lang.swift.parenexpr",
                "xcode.lang.swift.bracketexpr",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.openAngle";
        Syntax = {
            Rules = (
                "<",
                "\n?",
            );
        };
    },

    {
        Identifier = "xcode.lang.swift.conformance";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.conformance";
            Start = "xcode.lang.swift.conformance.start";
            Until = "\n|where|{|}|)|;";
            IncludeRules = (
                "xcode.lang.swift.commaAndEOL",
                "xcode.lang.swift.name.conformance",
                "xcode.lang.swift.parenexpr",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.conformance.start";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                ":",
                "\n*",
                "@retroactive?",
                "isolated?",
                "\n*",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.commaAndEOL";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                ",",
                "\n",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.name.conformance";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.identifier",
                "xcode.lang.swift.name.conformance.more*",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.name.conformance.more";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                ".",
                "xcode.lang.swift.identifier",
            );
        };
    },

    {
        Identifier = "xcode.lang.swift.whereclause";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "where";
            Until = "\n|{|}|)|;";
            IncludeRules = (
                "xcode.lang.swift.parenexpr",
                "xcode.lang.swift.commaAndEOL",
            );
        };
    },


    // MARK: - Structs

    {
        Identifier = "xcode.lang.swift.struct";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.struct.declarator",
                "\n*",
                "xcode.lang.swift.struct.block",
            );
            Type = "xcode.syntax.declaration.struct";
        };
    },

    {
        Identifier = "xcode.lang.swift.struct.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.conformance";
            Rules = (
                "struct",
                "\n*",
                "xcode.lang.swift.declaration.name",
                "\n*",
                "xcode.lang.swift.genericsclause?",
                "\n*",
                "xcode.lang.swift.conformance?",
                "\n*",
                "xcode.lang.swift.whereclause?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    
    // MARK: - Protocols

    {
        Identifier = "xcode.lang.swift.protocol";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.protocol.declarator",
                "\n*",
                "xcode.lang.swift.struct.block",
            );
            Type = "xcode.syntax.declaration.protocol";
        };
    },
    
    {
        Identifier = "xcode.lang.swift.protocol.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.conformance";
            Rules = (
                "protocol",
                "xcode.lang.swift.declaration.name",
                "\n*",
                "xcode.lang.swift.genericsclause?",
                "\n*",
                "xcode.lang.swift.conformance?",
                "\n*",
                "xcode.lang.swift.whereclause?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },

    // MARK: - Enums

    {
        Identifier = "xcode.lang.swift.enum";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.enum.declarator",
                "\n*",
                "xcode.lang.swift.enum.block",
            );
            Type = "xcode.syntax.declaration.enum";
        };
    },

    {
        Identifier = "xcode.lang.swift.enum.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.conformance";
            Rules = (
                "enum",
                "xcode.lang.swift.declaration.name",
                "\n*",
                "xcode.lang.swift.genericsclause?",
                "\n*",
                "xcode.lang.swift.conformance?",
                "\n*",
                "xcode.lang.swift.whereclause?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },

    {
        Identifier = "xcode.lang.swift.enum.case";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "case",
                "xcode.lang.swift.enum.case.declarator",
                "xcode.lang.swift.enum.case.more*",
            );
            ShouldTraverse = YES;
        };
    },
    {
        Identifier = "xcode.lang.swift.enum.case.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.enum.case.name.clause",
                "xcode.lang.swift.enum.case.assignment?",
            );
            Type = "xcode.syntax.declaration.enum.case";
        };
    },
    {
        Identifier = "xcode.lang.swift.enum.case.name.clause";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.enum.case.name",
                "xcode.lang.swift.parenexpr?",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.swift.enum.case.name";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.identifier|Protocol|Self|Type|actor|any|assignment|associativity|async|await|borrowing|consume|consuming|convenience|didSet|discard|distributed|dynamic|dynamicType|each|final|get|higherThan|indirect|infix|init|internal|isolated|lazy|left|lowerThan|macro|mutating|none|nonisolated|nonmutating|open|optional|override|package|postfix|precedence|precedencegroup|prefix|required|right|safe|self|sending|set|some|unowned|unsafe|weak|willSet",
            );
            Type = "xcode.syntax.name.other";
        };
    },
    {
        Identifier = "xcode.lang.swift.enum.case.assignment";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "=",
                "\n*",
                "xcode.lang.swift.string|xcode.lang.swift.integer|xcode.lang.swift.double",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.enum.case.more";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                ",",
                "\n*",
                "xcode.lang.swift.enum.case.declarator",
            );
            ShouldTraverse = YES;
        };
    },

// MARK: - Initializers

    {
        Identifier = "xcode.lang.swift.initializer";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.initializer.declarator",
                "async?",
                "throws?",
                "rethrows?",
                "async?",
                "\n*",
                "xcode.lang.swift.block?",
            );
            Type = "xcode.syntax.definition.method.class";
        };
    },

    {
        Identifier = "xcode.lang.swift.initializer.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.initializer.init",
                "xcode.lang.swift.initializer.optional?",
                "\n*",
                "xcode.lang.swift.genericsclause?",
                "\n*",
                "xcode.lang.swift.function.parameters",
            );
            Type = "xcode.syntax.method.declarator";
        };
    },

    {
        Identifier = "xcode.lang.swift.initializer.optional";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "?|!",
            );
            Type = "xcode.syntax.name.partial";
        };
    },

    {
        Identifier = "xcode.lang.swift.initializer.init";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "init",
            );
            Type = "xcode.syntax.name.partial";
        };
    },

    // MARK: - Function Definitions

    {
        Identifier = "xcode.lang.swift.function";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.params";
            Rules = (
                "xcode.lang.swift.function.declarator",
                "async?",
                "throws?",
                "rethrows?",
                "async?",
                "\n*",
                "xcode.lang.swift.function.return?",
                "\n*",
                "xcode.lang.swift.whereclause?",
                "\n*",
                "xcode.lang.swift.block?",
            );
            Type = "xcode.syntax.definition.function";
        };
    },
    {
        Identifier = "xcode.lang.swift.method";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.params";
            Rules = (
                "xcode.lang.swift.function.declarator",
                "async?",
                "throws?",
                "rethrows?",
                "async?",
                "\n*",
                "xcode.lang.swift.function.return?",
                "\n*",
                "xcode.lang.swift.whereclause?",
                "\n*",
                "xcode.lang.swift.block?",
            );
            Type = "xcode.syntax.definition.method";
        };
    },
    {
        Identifier = "xcode.lang.swift.function.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.params";
            Rules = (
                "func",
                "\n*",
                "xcode.lang.swift.function.name",
                "\n*",
                "xcode.lang.swift.genericsclause?",
                "\n*",
                "xcode.lang.swift.function.parameters?",
            );
            Type = "xcode.syntax.method.declarator";
        };
    },

    {
        Identifier = "xcode.lang.swift.function.name";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.params";
            Rules = (
                "xcode.lang.swift.anoperator|xcode.lang.swift.identifier|...|..<|==|<|>|Any|Protocol|Self|Type|actor|any|as|assignment|associatedtype|associativity|async|await|borrowing|break|case|catch|class|consume|consuming|continue|convenience|default|defer|deinit|didSet|discard|distributed|do|dynamic|dynamicType|each|else|enum|extension|fallthrough|false|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|internal|is|isolated|lazy|left|lowerThan|macro|mutating|nil|none|nonisolated|nonmutating|open|operator|optional|override|package|postfix|precedence|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|sending|set|some|static|struct|subscript|super|switch|throw|throws|true|try|typealias|unowned|unsafe|weak|where|while|willSet",
            );
            Type = "xcode.syntax.name.other";
        };
    },
    
    {
        Identifier = "xcode.lang.swift.function.parameters";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.params";
            Rules = (
                "xcode.lang.swift.function.parameters.start",
                "\n*",
                "xcode.lang.swift.function.parameter?",
                "xcode.lang.swift.function.parameters.more*",
                "xcode.lang.swift.function.parameters.end",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.swift.function.parameters.start";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.params";
            Rules = (
                "(",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    
    {
        Identifier = "xcode.lang.swift.function.parameters.end";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.params";
            Rules = (
                ")",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    
    {
        Identifier = "xcode.lang.swift.function.parameter";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.params";
            Rules = (
                "xcode.lang.swift.attribute.expression*",
                "xcode.lang.swift.function.parameter.label",
                "\n*",
                "xcode.lang.swift.function.parameter.name?",
                "\n*",
                "xcode.lang.swift.function.parameter.therest?",
            );
        };
    },

    {
        Identifier = "xcode.lang.swift.attribute.expression";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.params";
            Rules = (
                "xcode.lang.swift.identifier.attribute",
                "xcode.lang.swift.name.attribute.more*",
                "xcode.lang.swift.genericsclause?",
                "xcode.lang.swift.parenexpr?",
                "\n*",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.name.attribute.more";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.params";
            Rules = (
                ".",
                "xcode.lang.swift.identifier",
            );
        };
    },

    {
        Identifier = "xcode.lang.swift.function.parameters.more";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.params";
            Rules = (
                ",",
                "\n*",
                "xcode.lang.swift.function.parameter",
            );
        };
    },

    {
        Identifier = "xcode.lang.swift.function.parameter.therest";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.params";
            Start = "xcode.lang.swift.function.parameter.colon";
            Until = ",|)|}|]|;";
            IncludeRules = (
                "xcode.lang.swift.block",
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.parenexpr",
                "xcode.lang.swift.genericsclause",
            );
        };
    },

    {
        Identifier = "xcode.lang.swift.function.parameter.label";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.params";
            Rules = (
                "xcode.lang.swift.identifier|Any|Protocol|Self|Type|actor|any|as|assignment|associatedtype|associativity|async|await|borrowing|break|case|catch|class|consume|consuming|continue|convenience|default|defer|deinit|didSet|discard|distributed|do|dynamic|dynamicType|each|else|enum|extension|fallthrough|false|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|internal|is|isolated|lazy|left|lowerThan|macro|mutating|nil|none|nonisolated|nonmutating|open|operator|optional|override|package|postfix|precedence|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|sending|set|some|static|struct|subscript|super|switch|throw|throws|true|try|typealias|unowned|unsafe|weak|where|while|willSet",
                // Property wrappers can be qualified.
                "xcode.lang.swift.name.qualified.more*",
                // Property wrapper can be generic.
                "xcode.lang.swift.genericsclause?"
            );
            Type = "xcode.syntax.name.other";
        };
    },
    {
        Identifier = "xcode.lang.swift.function.parameter.name";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.params";
            Rules = (
                "xcode.lang.swift.identifier|Any|Protocol|Self|Type|actor|any|as|assignment|associatedtype|associativity|async|await|borrowing|break|case|catch|class|consume|consuming|continue|convenience|default|defer|deinit|didSet|discard|distributed|do|dynamic|dynamicType|each|else|enum|extension|fallthrough|false|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|internal|is|isolated|lazy|left|lowerThan|macro|mutating|nil|none|nonisolated|nonmutating|open|operator|optional|override|package|postfix|precedence|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|sending|set|some|static|struct|subscript|super|switch|throw|throws|true|try|typealias|unowned|unsafe|weak|where|while|willSet",
            );
        };
    },

    {
        Identifier = "xcode.lang.swift.function.parameter.colon";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                ":",
            );
            Type = "xcode.syntax.name.partial";
        };
    },

    {
        Identifier = "xcode.lang.swift.function.return";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "->";
            Until = "\n|{|}|)|;|=|where";
            IncludeRules = (
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.parenexpr",
                "xcode.lang.swift.genericsclause",
            );
        };
    },
    
    // MARK: - Subscripts
    {
        Identifier = "xcode.lang.swift.subscript";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.subscript.declarator",
                "\n*",
                "xcode.lang.swift.function.return",
                "\n*",
                "xcode.lang.swift.block?",
            );
            Type = "xcode.syntax.definition.subscript";
        };
    },
    {
        Identifier = "xcode.lang.swift.subscript.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.subscript.subscript",
                "xcode.lang.swift.genericsclause?",
                "xcode.lang.swift.function.parameters",
            );
            Type = "xcode.syntax.method.declarator";
        };
    },
    {
        Identifier = "xcode.lang.swift.subscript.subscript";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "subscript",
            );
            Type = "xcode.syntax.name.partial";
        };
    },

    // MARK: - Macros
    {
        Identifier = "xcode.lang.swift.macro";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.macro.declarator",
                "\n*",
                "xcode.lang.swift.function.return?",
            );
            Type = "xcode.syntax.definition.macro";
        };
    },
    {
        Identifier = "xcode.lang.swift.macro.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.params";
            Rules = (
                "macro",
                "\n*",
                "xcode.lang.swift.macro.name",
                "\n*",
                "xcode.lang.swift.genericsclause?",
                "\n*",
                "xcode.lang.swift.function.parameters",
            );
            Type = "xcode.syntax.method.declarator";
        };
    },

    {
        Identifier = "xcode.lang.swift.macro.name";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.params";
            Rules = (
                "xcode.lang.swift.identifier|Any|Protocol|Self|Type|actor|any|as|assignment|associatedtype|associativity|async|await|borrowing|break|case|catch|class|consume|consuming|continue|convenience|default|defer|deinit|didSet|discard|distributed|do|dynamic|dynamicType|each|else|enum|extension|fallthrough|false|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|internal|is|isolated|lazy|left|lowerThan|macro|mutating|nil|none|nonisolated|nonmutating|open|operator|optional|override|package|postfix|precedence|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|sending|set|some|static|struct|subscript|super|switch|throw|throws|true|try|typealias|unowned|unsafe|weak|where|while|willSet",
            );
            Type = "xcode.syntax.name.other";
        };
    },

    // MARK: - Properties

    {
        Identifier = "xcode.lang.swift.property";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "var|let",
                "xcode.lang.swift.property.name",
                "xcode.lang.swift.variable.type?",
                "xcode.lang.swift.variable.assignment?",
                "xcode.lang.swift.property.more*",
                "xcode.lang.swift.variable.block?",
            );
            Type = "xcode.syntax.declaration.property";
        };
    },
    {
        Identifier = "xcode.lang.swift.property.tuple";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "var|let",
                "xcode.lang.swift.property.namelist",
                "xcode.lang.swift.variable.type?",
                "xcode.lang.swift.variable.assignment.simple?",
            );
            Type = "xcode.syntax.declaration.property";
        };
    },
    {
        Identifier = "xcode.lang.swift.property.more";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                ",",
                "\n*",
                "let?",
                "var?",
                "xcode.lang.swift.property.name",
                "xcode.lang.swift.variable.type?",
                "xcode.lang.swift.variable.assignment.simple?",
            );
            Type = "xcode.syntax.declaration.property";
        };
    },
    {
        Identifier = "xcode.lang.swift.property.name";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.variable.name.identifier",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.swift.property.namelist";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "(";
            End = ")";
            Until = "=|{|}|[|]|;";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.swift.property.name",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.swift.variable.name.identifier";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.identifier|Protocol|Self|Type|actor|any|assignment|associativity|async|await|borrowing|consume|consuming|convenience|didSet|discard|distributed|dynamic|dynamicType|each|final|get|higherThan|indirect|infix|init|internal|isolated|lazy|left|lowerThan|macro|mutating|none|nonisolated|nonmutating|open|optional|override|package|postfix|precedence|precedencegroup|prefix|required|right|safe|self|sending|set|some|unowned|unsafe|weak|willSet",
            );
            Type = "xcode.syntax.name.other";
        };
    },

    {
        Identifier = "xcode.lang.swift.variable.type";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.variable";
            Start = ":";
            Until = "\n|else|=|{|}|]|)|;|,";
            IncludeRules = (
                "xcode.lang.swift.genericsclause",
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.parenexpr",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.variable.assignment";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "=";
            Until = "\n|}|]|)|;|,";
            IncludeRules = (
                "xcode.lang.swift.variable.block",
                "xcode.lang.swift.genericsclause.general",
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.parenexpr",
                "xcode.lang.swift.literal",
                "xcode.lang.swift.if",
                "xcode.lang.swift.switch",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.variable.block";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.swift.variable.init.block",
                "xcode.lang.swift.variable.set.block",
                "xcode.lang.swift.variable.get.block",
                "xcode.lang.swift.variable.willSet.block",
                "xcode.lang.swift.variable.didSet.block",
                "xcode.lang.swift.actor",
                "xcode.lang.swift.class",
                "xcode.lang.swift.extension",
                "xcode.lang.swift.typealias",
                "xcode.lang.swift.struct",
                "xcode.lang.swift.protocol",
                "xcode.lang.swift.enum",
                "xcode.lang.swift.function",
                "xcode.lang.swift.variable",
                "xcode.lang.swift.variable.tuple",
                "xcode.lang.swift.genericsclause.general",
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.parenexpr.complex",
                "xcode.lang.swift.guard",
                "xcode.lang.swift.if",
                "xcode.lang.swift.if.else.part",
                "xcode.lang.swift.for",
                "xcode.lang.swift.switch",
                "xcode.lang.swift.while",
                "xcode.lang.swift.repeat",
                "xcode.lang.swift.catch",
                "xcode.lang.swift.preprocessor.line",
                "xcode.lang.swift.literal",
            );
            Type = "xcode.syntax.definition.variable.block";
        };
    },
    {
        Identifier = "xcode.lang.swift.variable.init.block";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "init",
                "xcode.lang.swift.parenexpr?",
                "xcode.lang.swift.block",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.variable.set.block";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "set",
                "xcode.lang.swift.parenexpr?",
                "xcode.lang.swift.block",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.variable.get.block";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "get",
                "async?",
                "throws?",
                "xcode.lang.swift.block",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.variable.willSet.block";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "willSet",
                "xcode.lang.swift.parenexpr?",
                "xcode.lang.swift.block",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.variable.didSet.block";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "didSet",
                "xcode.lang.swift.parenexpr?",
                "xcode.lang.swift.block",
            );
        };
    },

    {
        Identifier = "xcode.lang.swift.variable.tuple";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "var|let",
                "xcode.lang.swift.variable.namelist",
                "xcode.lang.swift.variable.type?",
                "xcode.lang.swift.variable.assignment.simple?",
            );
            Type = "xcode.syntax.declaration.variable";
        };
    },
    {
        Identifier = "xcode.lang.swift.variable.global.tuple";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "var|let",
                "xcode.lang.swift.variable.global.namelist",
                "xcode.lang.swift.variable.type?",
                "xcode.lang.swift.variable.assignment.simple?",
            );
            Type = "xcode.syntax.declaration.variable";
        };
    },
    {
        Identifier = "xcode.lang.swift.variable.global";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "var|let",
                "xcode.lang.swift.variable.global.name",
                "xcode.lang.swift.variable.type?",
                "xcode.lang.swift.variable.assignment?",
                "xcode.lang.swift.variable.global.more*",
            );
            Type = "xcode.syntax.declaration.variable";
        };
    },
    {
        Identifier = "xcode.lang.swift.variable.global.name";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.variable.name.identifier",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.swift.variable";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "var|let",
                "xcode.lang.swift.variable.name",
                "xcode.lang.swift.variable.type?",
                "xcode.lang.swift.variable.assignment?",
                "xcode.lang.swift.variable.more*",
            );
            Type = "xcode.syntax.declaration.variable";
        };
    },
    {
        Identifier = "xcode.lang.swift.variable.more";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                ",",
                "\n*",
                "let?",
                "var?",
                "xcode.lang.swift.variable.name",
                "xcode.lang.swift.variable.type?",
                "xcode.lang.swift.variable.assignment?",
            );
            Type = "xcode.syntax.declaration.variable";
        };
    },
    {
        Identifier = "xcode.lang.swift.variable.global.more";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                ",",
                "\n*",
                "let?",
                "var?",
                "xcode.lang.swift.variable.global.name",
                "xcode.lang.swift.variable.type?",
                "xcode.lang.swift.variable.assignment?",
            );
            Type = "xcode.syntax.declaration.variable";
        };
    },
    {
        Identifier = "xcode.lang.swift.variable.simple";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "var|let",
                "xcode.lang.swift.variable.name",
                "xcode.lang.swift.variable.type?",
                "xcode.lang.swift.variable.assignment.simple?",
            );
            Type = "xcode.syntax.declaration.variable";
        };
    },
    {
        Identifier = "xcode.lang.swift.variable.namelist";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "(";
            End = ")";
            Until = "=|{|}|[|]|;";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.swift.variable.name",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.swift.variable.global.namelist";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "(";
            End = ")";
            Until = "=|{|}|[|]|;";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.swift.variable.global.name",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.swift.variable.assignment.simple";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "=";
            Until = "\n|else|{|}|]|)|;|,";
            IncludeRules = (
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.parenexpr",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.variable.case.let";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "let";
            Until = "\n|else|{|}|]|)|;|,|:|=";
            IncludeRules = (
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.variable.namelist",
            );
            Type = "xcode.syntax.declaration.variable";
        };
    },
    {
        Identifier = "xcode.lang.swift.variable.case.var";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "var";
            Until = "\n|else|{|}|]|)|;|,|:|=";
            IncludeRules = (
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.variable.namelist",
            );
            Type = "xcode.syntax.declaration.variable";
        };
    },

    {
        Identifier = "xcode.lang.swift.variable.name";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.identifier|Protocol|Self|Type|actor|any|assignment|associativity|async|await|borrowing|consume|consuming|convenience|didSet|discard|distributed|dynamic|dynamicType|each|final|get|higherThan|indirect|infix|init|internal|isolated|lazy|left|lowerThan|macro|mutating|none|nonisolated|nonmutating|open|optional|override|package|postfix|precedence|precedencegroup|prefix|required|right|safe|self|sending|set|some|unowned|unsafe|weak|willSet",
            );
            Type = "xcode.syntax.name";
        };
    },

    {
        Identifier = "xcode.lang.swift.pattern.case";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "case";
            Until = "\n|else|{|}|]|)|;|,|:|=";
            IncludeRules = (
                "xcode.lang.swift.variable.case.let",
                "xcode.lang.swift.variable.case.var",
                "xcode.lang.swift.genericsclause.general",
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.parenexpr.complex",
            );
        };
    },
    
// MARK: - Operators
    
    {
        Identifier = "xcode.lang.swift.precedencegroup";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Rules = (
                "xcode.lang.swift.precedencegroup.declarator",
                "\n*",
                "xcode.lang.swift.block",
            );
            Type = "xcode.syntax.declaration.precedencegroup";
        };
    },

    {
        Identifier = "xcode.lang.swift.precedencegroup.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.conformance";
            Rules = (
                "precedencegroup",
                "\n*",
                "xcode.lang.swift.declaration.name",
            );
            Type = "xcode.syntax.name.tree";
        };
    },

    {
        Identifier = "xcode.lang.swift.operator";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.params";
            Rules = (
                "prefix|postfix|infix?",
                "operator",
                "xcode.lang.swift.operator.name",
                "xcode.lang.swift.operator.precedence?",
            );
            Type = "xcode.syntax.declaration.operator";
        };
    },
    
    {
        Identifier = "xcode.lang.swift.operator.name";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.params";
            Rules = (
                "xcode.lang.swift.anoperator|xcode.lang.swift.identifier|...|..<|!=|==|<|>|!|&",
            );
            Type = "xcode.syntax.name";
        };
    },

    {
        Identifier = "xcode.lang.swift.operator.precedence";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer.params";
            Rules = (
                ":",
                "xcode.lang.swift.identifier",
            );
        };
    },

// MARK: - Code Structures

{
    Identifier = "xcode.lang.swift.guard";
    Syntax = {
        Tokenizer = "xcode.lang.swift.lexer";
        Start = "guard";
        Until = "else|{|}|]|)|;";
        IncludeRules = (
            "xcode.lang.swift.pattern.case",
            "xcode.lang.swift.variable.simple",
            "xcode.lang.swift.variable.tuple",
            "xcode.lang.swift.bracketexpr",
            "xcode.lang.swift.parenexpr.complex",
        );
        ShouldTraverse = YES;
    };
},
{
    Identifier = "xcode.lang.swift.if";
    Syntax = {
        Tokenizer = "xcode.lang.swift.lexer";
        Rules = (
            "xcode.lang.swift.if.part",
            // FIXME: we should allow newlines between the if block and `else`. But don't want if statements without `else` blocks to consume trailing newlines. rdar://84517469
            // "\n*",
            "xcode.lang.swift.if.else.part*",
        );
        ShouldTraverse = YES;
    };
},
{
    Identifier = "xcode.lang.swift.if.part";
    Syntax = {
        Tokenizer = "xcode.lang.swift.lexer";
        Rules = (
            "xcode.lang.swift.if.start",
            "\n*",
            "xcode.lang.swift.block",
        );
        ShouldTraverse = YES;
    };
},
{
    Identifier = "xcode.lang.swift.if.start";
    Syntax = {
        Tokenizer = "xcode.lang.swift.lexer";
        Start = "if";
        Until = "{|}|]|)|;";
        IncludeRules = (
            "xcode.lang.swift.pattern.case",
            "xcode.lang.swift.variable.simple",
            "xcode.lang.swift.variable.tuple",
            "xcode.lang.swift.bracketexpr",
            "xcode.lang.swift.parenexpr.complex",
        );
        ShouldTraverse = YES;
    };
},
{
    Identifier = "xcode.lang.swift.if.else.part";
    Syntax = {
        Tokenizer = "xcode.lang.swift.lexer";
        Rules = (
            "else",
            "\n*",
            "xcode.lang.swift.if.start?",
            "\n*",
            "xcode.lang.swift.block",
        );
        ShouldTraverse = YES;
    };
},

{
    Identifier = "xcode.lang.swift.switch";
    Syntax = {
        Tokenizer = "xcode.lang.swift.lexer";
        Rules = (
            "xcode.lang.swift.switch.start",
            "\n*",
            "xcode.lang.swift.switch.block",
        );
        ShouldTraverse = YES;
    };
},
{
    Identifier = "xcode.lang.swift.switch.start";
    Syntax = {
        Tokenizer = "xcode.lang.swift.lexer";
        Start = "switch";
        Until = "{|}|]|)|;";
        IncludeRules = (
            "xcode.lang.swift.bracketexpr",
            "xcode.lang.swift.parenexpr",
        );
    };
},
{
    Identifier = "xcode.lang.swift.switch.case";
    Syntax = {
        Tokenizer = "xcode.lang.swift.lexer";
        Start = "xcode.lang.swift.switch.case.start";
        Until = "case|default|}";
        IncludeRules = (
            "xcode.lang.swift.actor",
            "xcode.lang.swift.class",
            "xcode.lang.swift.extension",
            "xcode.lang.swift.typealias",
            "xcode.lang.swift.struct",
            "xcode.lang.swift.protocol",
            "xcode.lang.swift.enum",
            "xcode.lang.swift.function",
            "xcode.lang.swift.variable",
            "xcode.lang.swift.variable.tuple",
            "xcode.lang.swift.genericsclause.general",
            "xcode.lang.swift.bracketexpr",
            "xcode.lang.swift.parenexpr.complex",
            "xcode.lang.swift.guard",
            "xcode.lang.swift.if",
            "xcode.lang.swift.if.else.part",
            "xcode.lang.swift.for",
            "xcode.lang.swift.switch",
            "xcode.lang.swift.while",
            "xcode.lang.swift.repeat",
            "xcode.lang.swift.catch",
            "xcode.lang.swift.block",
            "xcode.lang.swift.preprocessor.line",
            "xcode.lang.swift.literal",
        );
        ShouldTraverse = YES;
    };
},
{
    Identifier = "xcode.lang.swift.switch.case.start";
    Syntax = {
        Tokenizer = "xcode.lang.swift.lexer";
        Start = "case";
        End = ":";
        Until = "=|;|case|default|{|}";
        IncludeRules = (
            "xcode.lang.swift.variable.case.let",
            "xcode.lang.swift.variable.case.var",
            "xcode.lang.swift.genericsclause.general",
            "xcode.lang.swift.bracketexpr",
            "xcode.lang.swift.parenexpr.complex",
        );
    };
},
{
    Identifier = "xcode.lang.swift.switch.default";
    Syntax = {
        Tokenizer = "xcode.lang.swift.lexer";
        Start = "default";
        Until = "case|default|}";
        IncludeRules = (
            "xcode.lang.swift.actor",
            "xcode.lang.swift.class",
            "xcode.lang.swift.extension",
            "xcode.lang.swift.typealias",
            "xcode.lang.swift.struct",
            "xcode.lang.swift.protocol",
            "xcode.lang.swift.enum",
            "xcode.lang.swift.function",
            "xcode.lang.swift.variable",
            "xcode.lang.swift.variable.tuple",
            "xcode.lang.swift.genericsclause.general",
            "xcode.lang.swift.bracketexpr",
            "xcode.lang.swift.parenexpr.complex",
            "xcode.lang.swift.guard",
            "xcode.lang.swift.if",
            "xcode.lang.swift.if.else.part",
            "xcode.lang.swift.for",
            "xcode.lang.swift.switch",
            "xcode.lang.swift.while",
            "xcode.lang.swift.repeat",
            "xcode.lang.swift.catch",
            "xcode.lang.swift.block",
            "xcode.lang.swift.preprocessor.line",
            "xcode.lang.swift.literal",
        );
        ShouldTraverse = YES;
    };
},
{
    Identifier = "xcode.lang.swift.switch.block";
    Syntax = {
        Tokenizer = "xcode.lang.swift.lexer";
        Start = "{";
        End = "}";
        Foldable = YES;
        IncludeRules = (
            "xcode.lang.swift.switch.case",
            "xcode.lang.swift.switch.default",
            "xcode.lang.swift.preprocessor.line",
            "xcode.lang.swift.block",
            "xcode.lang.swift.genericsclause.general",
            "xcode.lang.swift.bracketexpr",
            "xcode.lang.swift.parenexpr",
        );
    };
},

{
    Identifier = "xcode.lang.swift.while";
    Syntax = {
        Tokenizer = "xcode.lang.swift.lexer";
        Rules = (
            "xcode.lang.swift.while.start",
            "\n*",
            "xcode.lang.swift.block",
        );
        ShouldTraverse = YES;
    };
},
{
    Identifier = "xcode.lang.swift.while.start";
    Syntax = {
        Tokenizer = "xcode.lang.swift.lexer";
        Start = "while";
        Until = "{|}|]|)|;";
        IncludeRules = (
            "xcode.lang.swift.pattern.case",
            "xcode.lang.swift.variable.simple",
            "xcode.lang.swift.variable.tuple",
            "xcode.lang.swift.bracketexpr",
            "xcode.lang.swift.parenexpr.complex",
        );
    };
},

{
    Identifier = "xcode.lang.swift.repeat";
    Syntax = {
        Tokenizer = "xcode.lang.swift.lexer";
        Rules = (
            "repeat",
            "xcode.lang.swift.block",
            "xcode.lang.swift.repeat.while",
        );
        ShouldTraverse = YES;
    };
},
{
    Identifier = "xcode.lang.swift.repeat.while";
    Syntax = {
        Tokenizer = "xcode.lang.swift.lexer";
        Start = "while";
        Until = "\n";
        IncludeRules = (
            "xcode.lang.swift.commaAndEOL",
            "xcode.lang.swift.bracketexpr",
            "xcode.lang.swift.parenexpr",
        );
    };
},

{
    Identifier = "xcode.lang.swift.for";
    Syntax = {
        Tokenizer = "xcode.lang.swift.lexer";
        Rules = (
            "xcode.lang.swift.for.start",
            "\n*",
            "xcode.lang.swift.whereclause?",
            "\n*",
            "xcode.lang.swift.block",
        );
        ShouldTraverse = YES;
    };
},
{
    Identifier = "xcode.lang.swift.for.start";
    Syntax = {
        Tokenizer = "xcode.lang.swift.lexer";
        Start = "for";
        Until = "{|}|]|)|;|where";
        IncludeRules = (
            "xcode.lang.swift.bracketexpr",
            "xcode.lang.swift.parenexpr",
        );
    };
},

{
    Identifier = "xcode.lang.swift.catch";
    Syntax = {
        Tokenizer = "xcode.lang.swift.lexer";
        Rules = (
            "xcode.lang.swift.catch.start",
            "\n*",
            "xcode.lang.swift.block",
        );
        ShouldTraverse = YES;
    };
},
{
    Identifier = "xcode.lang.swift.catch.start";
    Syntax = {
        Tokenizer = "xcode.lang.swift.lexer";
        Start = "catch";
        Until = "{|}|]|)|;";
        IncludeRules = (
            "xcode.lang.swift.variable.simple",
            "xcode.lang.swift.variable.tuple",
            "xcode.lang.swift.bracketexpr",
            "xcode.lang.swift.parenexpr.complex",
        );
    };
},


// MARK: - Blocks/Closures

    {
        Identifier = "xcode.lang.swift.block";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.swift.actor",
                "xcode.lang.swift.class",
                "xcode.lang.swift.extension",
                "xcode.lang.swift.typealias",
                "xcode.lang.swift.struct",
                "xcode.lang.swift.protocol",
                "xcode.lang.swift.enum",
                "xcode.lang.swift.function",
                "xcode.lang.swift.variable",
                "xcode.lang.swift.variable.tuple",
                "xcode.lang.swift.variable.init.block",
                "xcode.lang.swift.variable.set.block",
                "xcode.lang.swift.variable.get.block",
                "xcode.lang.swift.genericsclause.general",
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.parenexpr.complex",
                "xcode.lang.swift.guard",
                "xcode.lang.swift.if",
                "xcode.lang.swift.if.else.part",
                "xcode.lang.swift.for",
                "xcode.lang.swift.switch",
                "xcode.lang.swift.while",
                "xcode.lang.swift.repeat",
                "xcode.lang.swift.catch",
                "xcode.lang.swift.preprocessor.line",
                "xcode.lang.swift.literal",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.swift.actor.block";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.swift.actor",
                "xcode.lang.swift.class",
                "xcode.lang.swift.extension",
                "xcode.lang.swift.associatedtype",
                "xcode.lang.swift.typealias",
                "xcode.lang.swift.struct",
                "xcode.lang.swift.protocol",
                "xcode.lang.swift.enum",
                "xcode.lang.swift.initializer",
                "xcode.lang.swift.subscript",
                "xcode.lang.swift.method",
                "xcode.lang.swift.property",
                "xcode.lang.swift.property.tuple",
                "xcode.lang.swift.block",
                "xcode.lang.swift.genericsclause.general",
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.parenexpr.complex.type",
                "xcode.lang.swift.preprocessor.line",
                "xcode.lang.swift.literal",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.swift.class.block";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.swift.actor",
                "xcode.lang.swift.class",
                "xcode.lang.swift.extension",
                "xcode.lang.swift.associatedtype",
                "xcode.lang.swift.typealias",
                "xcode.lang.swift.struct",
                "xcode.lang.swift.protocol",
                "xcode.lang.swift.enum",
                "xcode.lang.swift.initializer",
                "xcode.lang.swift.subscript",
                "xcode.lang.swift.method",
                "xcode.lang.swift.property",
                "xcode.lang.swift.property.tuple",
                "xcode.lang.swift.block",
                "xcode.lang.swift.genericsclause.general",
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.parenexpr.complex.type",
                "xcode.lang.swift.preprocessor.line",
                "xcode.lang.swift.literal",
            );
        };
    },

    {
        Identifier = "xcode.lang.swift.struct.block";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.swift.actor",
                "xcode.lang.swift.class",
                "xcode.lang.swift.extension",
                "xcode.lang.swift.associatedtype",
                "xcode.lang.swift.typealias",
                "xcode.lang.swift.struct",
                "xcode.lang.swift.protocol",
                "xcode.lang.swift.enum",
                "xcode.lang.swift.initializer",
                "xcode.lang.swift.subscript",
                "xcode.lang.swift.method",
                "xcode.lang.swift.property",
                "xcode.lang.swift.property.tuple",
                "xcode.lang.swift.block",
                "xcode.lang.swift.genericsclause.general",
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.parenexpr.complex.type",
                "xcode.lang.swift.preprocessor.line",
                "xcode.lang.swift.literal",
            );
        };
    },

    {
        Identifier = "xcode.lang.swift.enum.block";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.swift.actor",
                "xcode.lang.swift.class",
                "xcode.lang.swift.extension",
                "xcode.lang.swift.associatedtype",
                "xcode.lang.swift.typealias",
                "xcode.lang.swift.struct",
                "xcode.lang.swift.protocol",
                "xcode.lang.swift.enum",
                "xcode.lang.swift.enum.case",
                "xcode.lang.swift.initializer",
                "xcode.lang.swift.subscript",
                "xcode.lang.swift.method",
                "xcode.lang.swift.property",
                "xcode.lang.swift.property.tuple",
                "xcode.lang.swift.block",
                "xcode.lang.swift.genericsclause.general",
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.parenexpr.complex.type",
                "xcode.lang.swift.preprocessor.line",
                "xcode.lang.swift.literal",
            );
        };
    },

    // MARK: - Scopes/Delimiters

    {
        Identifier = "xcode.lang.swift.parenexpr";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "(";
            End = ")";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.genericsclause.general",
                "xcode.lang.swift.block",
                "xcode.lang.swift.literal",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.parenexpr.complex";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "(";
            End = ")";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.swift.variable.simple",
                "xcode.lang.swift.variable.tuple",
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.block",
                "xcode.lang.swift.literal",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.parenexpr.complex.type";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "(";
            End = ")";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.swift.property",
                "xcode.lang.swift.property.tuple",
                "xcode.lang.swift.bracketexpr",
                "xcode.lang.swift.block",
                "xcode.lang.swift.literal",
            );
        };
    },
    {
        Identifier = "xcode.lang.swift.bracketexpr";
        Syntax = {
            Tokenizer = "xcode.lang.swift.lexer";
            Start = "[";
            End = "]";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.swift.parenexpr",
                "xcode.lang.swift.genericsclause.general",
                "xcode.lang.swift.block",
                "xcode.lang.swift.literal",
            );
        };
    },

    // MARK: - Swift Doc Comments

    {
        Identifier = "xcode.lang.swift.doccomment.star";
        Syntax = {
            Start = "/**";
            End = "*/";
            Foldable = YES;
            IncludeRules = (
                "xcode.lang.swift.doccomment.keyword",
                "xcode.lang.url",
                "xcode.lang.url.mail",
                "xcode.lang.comment.recursive",
            );
            Type = "xcode.syntax.comment.doc";
        };
    },

    {
        Identifier = "xcode.lang.swift.doccomment.slash";
        Syntax = {
            Start = "///";
            Until = "\n";
            IncludeRules = (
                "xcode.lang.swift.doccomment.keyword",
                "xcode.lang.url",
                "xcode.lang.url.mail",
            );
            Type = "xcode.syntax.comment.doc";
        };
    },

    {
        Identifier = "xcode.lang.swift.doccomment.keyword";
        Syntax = {
            CaseSensitive = NO;
            Match = (
                "^\\s*(\\*|-|\\+)\\s*(Description|Parameters|Throws|Returns|Attention|Authors|Bug|Complexity|Copyright|Date|Experiment|Important|Invariant|Note|Precondition|Postcondition|Remark|Requires|SeeAlso|Since|Version|Warning)\\s*:",
                "^\\s*(\\*|-|\\+)\\s*(Parameter)\\s*[^\\s]*:"
            );
            CaptureTypes = (
                "xcode.syntax.comment.doc",
                "xcode.syntax.comment.doc.keyword",
            );
        };
    },

)
