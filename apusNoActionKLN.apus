whitespace   : /\s+/ .
linecomment  : /\/\/.*/ .
blockcomment : /\/\*(?s).*?\*\// .

identifier  = /\p{XID_Start}\p{XID_Continue}*/ .
literal     = /\"(?:[^\"\\]|\\.)*\"/ .
regex       = /\/(?:[^\/\\]|\\.)+\// .
action      = /@(?:[^@\\]|\\.)+@/ .
message     = /\^\^\^(?:(?s).*?)(?=\^\^\^|$)/ .

grammar     = { production } { message } .
              
production  = identifier ( ":" | "=" ) selection "." .
selection   = sequence { "|" sequence } .
sequence    = < term [ "?" | "*" | "+" ] > .
term        = terminal
            | "[" selection "]"
            | "{" selection "}"
            | "<" selection ">"
            | "(" selection ")" .
terminal    = identifier | literal | regex | action .

^^^
whitespace   : /\s+/ .
linecomment  : /\/\/.*/ .
blockcomment : /\/\*(?s).*?\*\// .

identifier  = /\p{XID_Start}\p{XID_Continue}*/ .
literal     = /\"(?:[^\"\\]|\\.)*\"/ .
regex       = /\/(?:[^\/\\]|\\.)+\// .
action      = /@(?:[^@\\]|\\.)+@/ .
message     = /\^\^\^(?:(?s).*?)(?=\^\^\^|$)/ .

grammar     = { production } { message } .
              
production  = identifier ( ":" | "=" ) selection "." .
selection   = sequence { "|" sequence } .
sequence    = < term [ "?" | "*" | "+" ] > .
term        = terminal
            | "[" selection "]"
            | "{" selection "}"
            | "<" selection ">"
            | "(" selection ")" .
terminal    = identifier | literal | regex | action .
