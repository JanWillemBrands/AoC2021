whitespace   : /\s+/ .
linecomment  : /\/\/.*/ .
blockcomment : /\/\*(?s).*?\*\// .

identifier  = /\p{XID_Start}\p{XID_Continue}*/ .
literal     = /\"(?:[^\"\\]|\\.)+\"/ .
regex       = /\/(?:[^\/\\]|\\.)+\// .
action      = /@(?:[^@\\]|\\.)+@/ .
message     = /\^\^\^(?:(?s).*?)(?=\^\^\^|$)/ .

grammar     = { production } { message } .
              
production  = identifier ( ":" | "=" ) selection "." .
selection   = sequence { "|" sequence } .
sequence    = < term [ "?" | "*" | "+" ] > .
term        = terminal
            | "[" selection "]"
            | "{" selection "}"
            | "<" selection ">"
            | "(" selection ")" .
terminal    = identifier | literal | regex | action .
epsilon     = "" | "#"
            | "Œï" // GREEK CAPITAL LETTER EPSILON
            | "Œµ" // GREEK SMALL LETTER EPSILON
            | "œµ" // GREEK LUNATE EPSILON SYMBOL
            | "‘ê" // CYRILLIC CAPITAL LETTER REVERSED ZE OR EPSILON
            | "‘ë" // CYRILLIC SMALL LETTER REVERSED ZE OR EPSILON
            | "ùõÜ" // MATHEMATICAL BOLD CAPITAL EPSILON
            | "ùõú" // MATHEMATICAL BOLD SMALL EPSILON
            | "ùúÄ" // MATHEMATICAL ITALIC CAPITAL EPSILON
            | "ùúñ" // MATHEMATICAL ITALIC SMALL EPSILON
            | "ùú∫" // MATHEMATICAL BOLD ITALIC CAPITAL EPSILON
            | "ùùê" // MATHEMATICAL BOLD ITALIC SMALL EPSILON
            | "ùù¥" // MATHEMATICAL SANS-SERIF BOLD CAPITAL EPSILON
            | "ùûä" // MATHEMATICAL SANS-SERIF BOLD SMALL EPSILON
            | "ùûÆ" // MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL EPSILON
            | "ùüÑ" // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL EPSILON
            .

^^^
whitespace   : /\s+/ .
linecomment  : /\/\/.*/ .
blockcomment : /\/\*(?s).*?\*\// .

identifier  = /\p{XID_Start}\p{XID_Continue}*/ .
literal     = /\"(?:[^\"\\]|\\.)*\"/ .
regex       = /\/(?:[^\/\\]|\\.)+\// .
action      = /@(?:[^@\\]|\\.)+@/ .
message     = /\^\^\^(?:(?s).*?)(?=\^\^\^|$)/ .

grammar     = { production } { message } .
              
production  = identifier ( ":" | "=" ) selection "." .
selection   = sequence { "|" sequence } .
sequence    = < term [ "?" | "*" | "+" ] > .
term        = terminal
            | "[" selection "]"
            | "{" selection "}"
            | "<" selection ">"
            | "(" selection ")" .
terminal    = identifier | literal | regex | action .
